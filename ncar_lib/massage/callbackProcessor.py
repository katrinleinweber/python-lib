"""
callbackProcessor

calls specified recordProcessing function on each record.
report generated by output of rpFunctions
RecordProcessor class attribute controls whether records are preprocessed by massagingProcessor 
"""

import os, sys
from ncar_lib.lib import globals, webcatUtils
import baseProcessor

## callback functions (taking RecordProcessor instance, rp, as argument)

class CallbackCollectionProcessor(baseProcessor.CollectionProcessor):
	"""
	calls supplied recordProcessing function on each of the records in the collection
	"""
	rpClass = baseProcessor.RecordProcessor
	
	def __init__ (self, collection, rpFunction):
		label = "%s (%s)" % (collection, rpFunction.__name__)
		print "%s\n%s\n" % (label, '-'*len(label))
		self.rpFunction = rpFunction
		baseProcessor.CollectionProcessor.__init__ (self, collection)
	
	def process (self, rp):
		self.rpFunction(rp)

class CallbackIdListProcessor (baseProcessor.SimpleIdListProcessor):
	rpClass = baseProcessor.RecordProcessor

	def __init__ (self, idList, rpFunction):
		self.idList = idList
		self.idList.sort()
		self.rpFunction = rpFunction
		for id in self.idList:
			path = webcatUtils.getRecordPath(id)
			try:
				rp = self.rpClass (path)
			except:
				print "ERROR: %s could not be instantiated: %s" % (id, sys.exc_info()[1])
				continue
			self.process (rp)
			
	def process (self, rp):
		if self.rpFunction:
			self.rpFunction(rp)
		
class CallbackMetadataProcessor (baseProcessor.MetadataProcessor):
	cpClass = CallbackCollectionProcessor
	
	def __init__ (self, rpFunction):
		baseDir = os.path.join (globals.metadata, "library_dc")
		for collection in os.listdir (baseDir):
			if collection == '.DS_Store': continue
			if rpFunction:
				self.cpClass (collection, rpFunction)
		
def multiCollectionProcessor ():
	print globals.collectionNameMap.keys()
	for collection in globals.collectionNameMap.keys():
		if not collection in ['technotes', 'manuscripts']:
			CallbackCollectionProcessor (collection)
			
def callback (rp):
	print rp.recId
			
if __name__ == "__main__":

	# CallbackCollectionProcessor ("manuscripts", callback)
	CallbackMetadataProcessor (callback)
	# CallbackIdListProcessor (["TECH-NOTE-000-000-000-006"], callback)

	

